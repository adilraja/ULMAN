/*
 * NewJFrame.java
 *
 * Created on April 11, 2005, 4:55 PM
 */

package prac;

/**
 *
 * @author  Administrator
 */
import java.io.*;
import java.net.*;
import com.jscape.inet.ssh.*;
import com.jscape.inet.ssh.util.SshParameters;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.SwingUtilities;
import java.util.*;

public class NewJFrame extends javax.swing.JFrame implements SshListener {
    
    /** Creates new form NewJFrame */
    private boolean connected=false, painting=false, canDrag=false, pressed=false;
    private Ssh [] ssh={null, null};
    private String [] ulmanNodes=new String[2];//contains the IP addresses of the ULMAN Nodes
    private String commands[]={"","aodv Kernel", "OLSR-olsr.org","DSR-PicoNet","AODV-UU","Lunar","COMO Menu", "System Diagnostics", "Clean UP"}; 
    private String aodvKernelCommands[]={"","Routing Table", "Aodv Neighbors", "Timers", "Flood_ID", "Main Menu"};
    private String dsrCommands[]={"","DSR Modinfo", "DSR Routing Information", "Main Menu"};
    private String comoMenuCommands[]={"","View and Edit Como.conf", "Launch Como", "Launch Links", "Main Menu"};
    private String cleanupCommands[]={"","Remove AODV kernel from user space", "Remove DSR-Piconet from user space"};
    private String systemDiagnosticsCommands[]={"","View Card Type","Launch Joe Editor", "Change to su","Launch {t}ethereal in write mode","View captured {t}ethereal file","Launch netperf server","Reset wireless card","Wireless Tools","IFstat","Iptraf"};
    private String wirelessToolsCommands[]={"","View available txpower", "set txPower", "View Current bitrate", "View current peers", "View Current Channel", "Scanning Report", "main Menu"};
    private JComboBox commandBox, aodvBox, dsrBox, comoMenuBox,cleanupBox, diagnosticsBox, wirelessToolsBox;
    private SwingWorker worker;
    private Ssh ssh1, ssh2;
    private JList jList1, jList2;
    private Vector ulManNodes, totNodes, consoleNodes;
    private  ListSelectionModel jList1SelectionModel;
    private final DefaultListModel model;
    private int x,y, dragFromX, dragFromY, nodeIndex, comboNumber;
    final static Color bg = Color.white;
    final static Color fg = Color.black;
    final static Color red = Color.red;
    final static Color white = Color.white;
   private FontMetrics fontMetrics;
   private Node []topologyNodes=new Node[9];
   final static int maxCharHeight = 30;
    final static int minFontSize = 12;
    final static BasicStroke wideStroke = new BasicStroke(8.0f);
    TopologyPanel topoPan=new TopologyPanel();
 
    final static float dash1[] = {10.0f};
    final static BasicStroke dashed = new BasicStroke(1.0f, 
                                                      BasicStroke.CAP_BUTT, 
                                                      BasicStroke.JOIN_MITER, 
                                                      10.0f, dash1, 0.0f);
   final static BasicStroke stroke = new BasicStroke(2.0f);
   private Image node1;
   public NewJFrame() {
           x=40;
           y=40;
           node1=Toolkit.getDefaultToolkit().getImage("/root/Prac/images/ulman_node.gif");
//           graphics=node1.getGraphics();
         
          
        this.model=new DefaultListModel();
        initComponents();
        this.ulManNodes=new Vector(12);
        this.totNodes=new Vector(12);
        this.consoleNodes=new Vector(12);
        this.initilizeNodeList();
        this.commandBox=new JComboBox(this.commands);
        this.aodvBox=new JComboBox(this.aodvKernelCommands);
        this.aodvBox.setEditable(false);
        
        this.comboNumber=0;
        this.jPanel27.add(this.commandBox);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        this.jPanel20.add(this.topoPan);
        this.topoPan.add("adil",  new JLabel("hello there"));
        this.topoPan.setBackground(Color.white);
        this.topoPan.setVisible(true);
//         for (int i=0;i<9;i++){
  //           this.topologyNodes[i]=new Node();
    //    }
         
 //      this.jTextField7.setText("");
        initFileChooser();
        
         
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */   
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel11 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jLabel2 = new javax.swing.JLabel();
        jPanel23 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel22 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel24 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel26 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel25 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jPanel27 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jPasswordField1 = new javax.swing.JPasswordField();
        jPanel17 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ULMAN Controller");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(800, 600));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel7.setLayout(new java.awt.GridLayout(1, 0));

        jPanel7.setBorder(new javax.swing.border.EtchedBorder());
        jPanel7.setMinimumSize(new java.awt.Dimension(210, 100));
        jPanel12.setLayout(new java.awt.GridLayout(1, 0));

        jPanel13.setLayout(new java.awt.GridLayout(0, 1));

        jButton7.setText("Ping All Nodes");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jPanel13.add(jButton7);

        jPanel12.add(jPanel13);

        jPanel14.setLayout(new java.awt.GridLayout(0, 1));

        jButton10.setText("Ping Node");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jPanel14.add(jButton10);

        jButton1.setIcon(new javax.swing.ImageIcon("E:\\Prac\\images\\Open16.gif"));
        jButton1.setText("Open Program");
        jButton1.setToolTipText("Open Program");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel14.add(jButton1);

        jPanel12.add(jPanel14);

        jPanel18.setLayout(new java.awt.GridLayout(0, 1));

        jPanel18.add(jTextField5);

        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jPanel18.add(jTextField6);

        jPanel12.add(jPanel18);

        jPanel7.add(jPanel12);

        jPanel1.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel5.setBorder(new javax.swing.border.EtchedBorder());
        jPanel5.setMinimumSize(new java.awt.Dimension(165, 75));
        jPanel5.setPreferredSize(new java.awt.Dimension(165, 75));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel8.setBorder(new javax.swing.border.EtchedBorder());
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Protocol Manipulation Results");
        jPanel8.add(jLabel4, java.awt.BorderLayout.NORTH);

        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Serif", 0, 14));
        jTextArea1.setForeground(new java.awt.Color(255, 51, 51));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(8);
        jTextArea1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jTextArea1.setDragEnabled(true);
        jScrollPane1.setViewportView(jTextArea1);

        jTabbedPane2.addTab("Node 1 Shell", jScrollPane1);

        jScrollPane2.setViewportView(jTextArea2);

        jTabbedPane2.addTab("Node2 Shell", jScrollPane2);

        jPanel8.add(jTabbedPane2, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel11.setLayout(new java.awt.GridLayout(0, 1));

        jPanel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jPanel11.setName("");
        jPanel21.setLayout(new java.awt.BorderLayout());

        jPanel21.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Add Remove Nodes");
        jLabel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jPanel21.add(jLabel2, java.awt.BorderLayout.NORTH);
        jLabel2.getAccessibleContext().setAccessibleName("ULMAN Launch");

        jPanel23.setLayout(new java.awt.GridLayout(1, 0));

        jButton3.setText("Add Nodes");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel23.add(jButton3);

        jButton4.setText("Remove");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jPanel23.add(jButton4);

        jPanel21.add(jPanel23, java.awt.BorderLayout.SOUTH);

        jPanel11.add(jPanel21);

        jPanel22.setLayout(new java.awt.BorderLayout());

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Output Consoles");
        jLabel5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jPanel22.add(jLabel5, java.awt.BorderLayout.NORTH);
        jLabel5.getAccessibleContext().setAccessibleName("");

        jPanel22.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jPanel24.setLayout(new java.awt.GridLayout(1, 0));

        jButton5.setText("Start Shell");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jPanel24.add(jButton5);

        jButton6.setText("Stop Shell");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jPanel24.add(jButton6);

        jPanel22.add(jPanel24, java.awt.BorderLayout.SOUTH);

        jPanel11.add(jPanel22);

        jPanel5.add(jPanel11, java.awt.BorderLayout.WEST);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.GridLayout(1, 0));

        jPanel6.setMinimumSize(new java.awt.Dimension(411, 100));
        jLabel3.setText("Remote Shell");
        jPanel26.add(jLabel3);

        jPanel6.add(jPanel26);

        jPanel25.setLayout(new java.awt.BorderLayout());

        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel25.add(jButton2, java.awt.BorderLayout.EAST);

        jPanel27.setLayout(new java.awt.GridLayout(1, 0));

        jPanel25.add(jPanel27, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel25);

        jPanel1.add(jPanel6, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("Communication And Control", jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel9.setBorder(new javax.swing.border.EtchedBorder());
        jButton8.setText("Load");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                NewJFrame.this.mousePressed(evt);
            }
        });

        jPanel9.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 30));

        jButton11.setText("Save");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jPanel9.add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 100, -1));

        jPanel2.add(jPanel9, java.awt.BorderLayout.WEST);

        jPanel10.setLayout(new java.awt.GridLayout(1, 0));

        jPanel19.setLayout(new java.awt.BorderLayout());

        jPanel19.setBackground(new java.awt.Color(255, 255, 255));
        jPanel19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                NewJFrame.this.mousePressed(evt);
            }
        });
        jPanel19.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                NewJFrame.this.mouseDragged(evt);
            }
        });

        jPanel10.add(jPanel19);

        jPanel2.add(jPanel10, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Network Monitoring", jPanel2);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel20.setLayout(new java.awt.BorderLayout());

        jPanel3.add(jPanel20, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Logging", jPanel3);

        jPanel4.setBorder(new javax.swing.border.MatteBorder(null));
        jTabbedPane1.addTab("Statistics And Analysis", jPanel4);

        jPanel15.setLayout(new java.awt.GridLayout(0, 1));

        jPanel16.setLayout(null);

        jLabel1.setText("Add ULMAN Node");
        jPanel16.add(jLabel1);
        jLabel1.setBounds(10, 10, 160, 15);

        jTextField1.setText("Enter IP Address");
        jTextField1.setToolTipText("Enter The IP Address of the ULMAN node to be added to the Network");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
        });

        jPanel16.add(jTextField1);
        jTextField1.setBounds(10, 60, 150, 19);

        jTextField2.setText("Enter Login");
        jTextField2.setToolTipText("Enter The Loging name of the ULMAN node to be added to the Network");
        jTextField2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField2MouseClicked(evt);
            }
        });

        jPanel16.add(jTextField2);
        jTextField2.setBounds(170, 60, 120, 19);

        jButton9.setText("Enter");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton9MouseClicked(evt);
            }
        });

        jPanel16.add(jButton9);
        jButton9.setBounds(476, 60, 90, 25);

        jPasswordField1.setText("Enter Password");
        jPasswordField1.setToolTipText("Enter The Password of the ULMAN node to be added to the Network");
        jPasswordField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordField1ActionPerformed(evt);
            }
        });
        jPasswordField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPasswordField1MouseClicked(evt);
            }
        });

        jPanel16.add(jPasswordField1);
        jPasswordField1.setBounds(310, 60, 130, 19);

        jPanel15.add(jPanel16);

        jPanel15.add(jPanel17);

        jTabbedPane1.addTab("Network Management", jPanel15);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:
        switch(this.comboNumber){
            case 0://commandBox
        {
            switch (this.commandBox.getSelectedIndex()){
                case 0: break;
                case 1:{
                        this.commandBox.setVisible(false);
                        this.jPanel27.remove(this.commandBox);
                        this.jPanel27.add(this.aodvBox);
                        this.aodvBox.setVisible(true);
                        this.jPanel27.validate();
                        this.comboNumber=1;
                        break;
                }
                case 2:{
                    
                }
                case 3:{
                    
                }   
                case 4:{
                    
                }
                case 5:{
                    
                }
                case 6:{
                    
                }
                case 7:{
                    
                }
                case 8:{
                    
                }
            }
  //          this.jTextArea1.append(Integer.toString(this.commandBox.getSelectedIndex()));
            break;
        }
            case 1://aodvKernel
            {
                switch(this.aodvBox.getSelectedIndex()){
                    case 0:
                    {
                        //for routes
                    }
                    case 1:
                    {
                        
                    }
                    case 2:
                    {
                        
                    }
                    case 3:
                    {
                        
                    }
                    case 4:
                    {
                        
                    }
                    case 5: //back to main menu
                    {
                        this.aodvBox.setVisible(false);
                        this.jPanel27.remove(this.aodvBox);
                        this.jPanel27.add(this.commandBox);
                        this.commandBox.setVisible(true);
                        this.jPanel27.validate();
                        this.comboNumber=0;
                        break;
                    }
                }//aodv switch
            }
        }//combonumber switch
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
// TODO add your handling code here:
         Object[] xs = jList2.getSelectedValues();
         for(int i=0;i<xs.length;i++) {
            for(int j=0;j<this.ulManNodes.size();j++){
                Node node=(Node)this.ulManNodes.elementAt(j);
                if(node.getControlIpAddress().compareTo(xs[i].toString())==0){
                    jTabbedPane2.remove(node.getJScrollPane());
                                   
                }
            }
         }
         
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
// TODO add your handling code here:
        Object[] xs = jList2.getSelectedValues();
    for(int i=0;i<xs.length;i++) {
            for(int j=0;j<this.ulManNodes.size();j++){
                Node node=(Node)this.ulManNodes.elementAt(j);
                if(node.getControlIpAddress().compareTo(xs[i].toString())==0){
                    node.getJTextArea().setText(node.getOutPut());
                    jTabbedPane2.addTab(node.getControlIpAddress()+" Shell", node.getJScrollPane());
                    
                }
            }
    }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
// TODO add your handling code here:
        Object[] xs = jList1.getSelectedValues();
        boolean flag;
        for(int i=0;i<xs.length;i++)
        {
            for(int j=0;j<this.ulManNodes.size();j++){
                Node node =(Node)this.ulManNodes.elementAt(j);
                if(node.getControlIpAddress().compareTo(xs[i].toString())==0){
                   this.jTabbedPane2.remove(node.getJScrollPane());
                   this.ulManNodes.removeElementAt(j);
                   node=null;
                }
            }
            this.consoleNodes.remove(xs[i].toString());
        }
        this.jList2=new JList(this.consoleNodes);
        this.jList2.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
          this.jList2.setSelectedIndex(-1);
          this.jList2.setVisible(true);
          this.jList2.setOpaque(true);
          this.jList2.setBackground(Color.white);
          this.jScrollPane4.setViewportView(this.jList2);
       
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// TODO add your handling code here:
        boolean flag=false;
        Object[] xs = jList1.getSelectedValues();
    for(int i=0;i<xs.length;i++) {
            for(int j=0;j<this.ulManNodes.size();j++){
                Node node=(Node)this.ulManNodes.elementAt(j);
                if(node.getControlIpAddress().compareTo(xs[i].toString())==0){
                    flag=true;//the element already exists
                }
            }
         if(flag==false){
            this.consoleNodes.addElement(xs[i].toString());
            Node newNode=new Node();
            newNode.setControlIpAddress(xs[i].toString());
            this.ulManNodes.addElement(newNode);
         }
         else{
                this.jTextArea1.append("Nodes already present\n");
         }
    }
        this.jList2=new JList(this.consoleNodes);
        this.jList2.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
          this.jList2.setSelectedIndex(-1);
          this.jList2.setVisible(true);
          this.jList2.setOpaque(true);
          this.jList2.setBackground(Color.white);
          this.jScrollPane4.setViewportView(this.jList2);
          
    }//GEN-LAST:event_jButton3ActionPerformed
 private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {
/*// TODO add your handling code here:
      ListSelectionModel lsm = (ListSelectionModel)evt.getSource();

            int firstIndex = evt.getFirstIndex();
            int lastIndex = evt.getLastIndex();
            boolean isAdjusting = evt.getValueIsAdjusting(); 
            System.out.print("Event for indexes "
                          + firstIndex + " - " + lastIndex
                          + "; isAdjusting is " + isAdjusting
                          + "; selected indexes:");

            if (lsm.isSelectionEmpty()) {
                System.out.print(" <none>");
            } else {
                // Find out which indexes are selected.
                int minIndex = lsm.getMinSelectionIndex();
                int maxIndex = lsm.getMaxSelectionIndex();
                for (int i = minIndex; i <= maxIndex; i++) {
                    if (lsm.isSelectedIndex(i)) {
                        System.out.print(" " + i);
                    }
                }
            }
            System.out.print("\n");*/
   //    
    }
 public void showItems()
 {
     Object[] xs = jList1.getSelectedValues();
    for(int i=0;i<xs.length;i++) {
         this.jTextArea1.append(xs[i].toString()+"\n");
  //    this.model.removeElement(xs[i]);
    }
 }
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
// TODO add your handling code here:
         if(pressed){
                   try
                   {
                        BufferedWriter ofile = 
              new BufferedWriter(new FileWriter("/root/Prac/resources/ULMAN_Nodes.txt"));
                        String  line="";
                        int temp;
                        for(int i=0;i<9;i++){
                            line+=this.topologyNodes[i].getControlIpAddress()+" ";
                            line+=this.topologyNodes[i].getIpAddress()+" ";
                            line+=this.topologyNodes[i].getX()+" ";
                            line+=this.topologyNodes[i].getY()+"\n";
                        }
                        ofile.write(line);
                        ofile.close();
                   } 
                     catch(IOException ioex)
                     {
                         this.jTextArea1.append("IO exception"+ioex.getMessage());
                     }
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void mousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mousePressed
// TODO add your handling code here:
        for (int i=0;i<9;i++)
        {
            if(evt.getX()>=this.topologyNodes[i].getX()&&evt.getX()<=(this.topologyNodes[i].getX()+40) && evt.getY()>=this.topologyNodes[i].getY()&&evt.getY()<=(this.topologyNodes[i].getY()+40))
            {
                this.canDrag=true;
                this.dragFromX=evt.getX()-this.topologyNodes[i].getX();
                this.dragFromY=evt.getY()-this.topologyNodes[i].getY();
                this.nodeIndex=i;
                break;
            }
            else
            {
                this.canDrag=false;
       
            }
        }
    }//GEN-LAST:event_mousePressed

    private void mouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseDragged
// TODO add your handling code here:
        if(this.canDrag)
        {
           this.topologyNodes[this.nodeIndex].setX(evt.getX()-this.dragFromX); 
           this.topologyNodes[this.nodeIndex].setY(evt.getY()-this.dragFromY);
           this.topologyNodes[this.nodeIndex].setX(Math.max(this.topologyNodes[this.nodeIndex].getX(),0));
           this.topologyNodes[this.nodeIndex].setX(Math.min(this.topologyNodes[this.nodeIndex].getX(),this.jPanel19.getWidth()-40));
           this.topologyNodes[this.nodeIndex].setY(Math.max(this.topologyNodes[this.nodeIndex].getY(),0));
           this.topologyNodes[this.nodeIndex].setY(Math.min(this.topologyNodes[this.nodeIndex].getY(),this.jPanel19.getHeight()-40));
//           x=Math.min(x,this.jPanel19.getWidth());
  //         y=Math.max(y,0);
    //       y=Math.min(y,this.jPanel19.getHeight());
//       Graphics g = this.jPanel19.getGraphics();
//        repaint();
 //       Graphics g=this.jPanel19.getGraphics();;
        Paint();
        }
    }//GEN-LAST:event_mouseDragged
//my test code
    FontMetrics pickFont(Graphics2D g2,
                         String longString,
                         int xSpace) {
        boolean fontFits = false;
        Font font = g2.getFont();
        FontMetrics fontMetrics = g2.getFontMetrics();
        int size = font.getSize();
        String name = font.getName();
        int style = font.getStyle();

        while ( !fontFits ) {
            if ( (fontMetrics.getHeight() <= maxCharHeight)
                 && (fontMetrics.stringWidth(longString) <= xSpace) ) {
                fontFits = true;
            }
            else {
                if ( size <= minFontSize ) {
                    fontFits = true;
                }
                else {
                    g2.setFont(font = new Font(name,
                                               style,
                                               --size));
                    fontMetrics = g2.getFontMetrics();
                }
            }
        }

        return fontMetrics;
    }
    
public void Update(){
      Paint();
        
}

    

public void Paint(){
         Graphics g = this.jPanel19.getGraphics();
         this.jPanel19.paint(g);
               Graphics2D g2 = (Graphics2D) g;
         g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
         Color fg3D = Color.lightGray;
         Dimension d = this.jPanel19.getSize();
         int gridWidth = d.width / 6;
         int gridHeight = d.height / 2;
          fontMetrics = pickFont(g2, "Filled and Stroked GeneralPath",
                               gridWidth);
          
        try
        {
              BufferedReader ifile = 
              new BufferedReader(new FileReader("/root/Prac/resources/aodv_routes.txt")); 
                   try
                   {
                        String  line;
                        int k=0,temp;
                         while((line = ifile.readLine()) != null&& k==0)
                         {
                             String tokens[]=line.split(" ");
                             for(int i=0;i<this.topologyNodes.length;i++)
                             {
                                 if(tokens[0].compareTo(this.topologyNodes[i].getIpAddress())==0)
                                 {
                                    for(int j=0;j<this.topologyNodes.length;j++)
                                    {
                                        if(tokens[1].compareTo(this.topologyNodes[j].getIpAddress())==0)
                                        {
                                            g2.drawLine(this.topologyNodes[i].getX()+20, this.topologyNodes[i].getY()+20, this.topologyNodes[j].getX()+20, this.topologyNodes[j].getY()+20);
                                        }
                                    }
                                 }
                             }
         //                    i++;
                          }
                       
                     }
                    catch(IOException ioex)
                     {
                         this.jTextArea1.append("IO exception"+ioex.getMessage());
                     }
              try{
              ifile.close();
              }
              catch(IOException ioex)
              {
                         this.jTextArea1.append("IO exception"+ioex.getMessage());
              }
        }
          catch(FileNotFoundException fnf)
          {
                        this.jTextArea1.append("Couldn't open " + fnf.getMessage());
          }
        
        for(int i=0;i<9;i++)
        {
            g2.drawImage(this.topologyNodes[i].getImage(),this.topologyNodes[i].getX(),this.topologyNodes[i].getY(),40,40,this);
            g2.drawString(this.topologyNodes[i].getIpAddress(),this.topologyNodes[i].getX(),this.topologyNodes[i].getY()+50);
        }
}
public void initilizeNodeList(){
    Vector v =new Vector(12);
     try
        {
              BufferedReader ifile = 
              new BufferedReader(new FileReader("/root/Prac/resources/ulman_control_IPs.txt")); 
                   try
                   {
                        String  line;
                        int i=0, temp;
                         while((line = ifile.readLine()) != null&& i<9)
                         {
                //             this.nodeList[i]=line;
                //            iam[i]=new String[1];
                            this.totNodes.addElement(line);
                     //       i++;
                         } 
                           this.jList1=new JList(this.totNodes);
 //        this.jList1SelectionModel=this.jList1.getSelectionModel();
//         this.jList1SelectionModel.addListSelectionListener(new SharedListSelectionHandler());
          this.jList1.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
          this.jList1.setSelectedIndex(0);
          this.jList1.setVisible(true);
          this.jList1.setOpaque(true);
          this.jList1.setBackground(Color.white);
          this.jScrollPane3.setViewportView(this.jList1);
                     }
                    catch(IOException ioex)
                     {
                         this.jTextArea1.append("IO exception"+ioex.getMessage());
                     }
              try{
              ifile.close();
              }
              catch(IOException ioex)
              {
                         this.jTextArea1.append("IO exception"+ioex.getMessage());
              }
        }
          catch(FileNotFoundException fnf)
          {
                System.out.print("couldnt open"+fnf.getMessage());       
              //this.jTextArea1.append("Couldn't open " + fnf.getMessage());
          }
//     this.pressed=true;
 //    return this.nodeList;   
}
//my test code
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
// TODO add your handling code here:
//        Graphics g=this.jPanel19.getGraphics();
       
 //           this.initilizeTopologyNodes();
       
        this.painting=true;
        Paint();
        
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
// TODO add your handling code here:
        String s;
        try {
                Process p = Runtime.getRuntime().exec("/root/Prac/scripts/adil_test");//ping -c 4 " + this.jTextField2.getText());
                BufferedReader stdInput = new BufferedReader(new 
                InputStreamReader(p.getInputStream()));
                BufferedReader stdError = new BufferedReader(new 
                InputStreamReader(p.getErrorStream()));
                
          // read the output from the command
            
 //           System.out.println("Here is the standard output of the command:\n");
            while ((s = stdInput.readLine()) != null) {
                    this.jTextArea1.append(s+"\n");
            }
            // read any errors from the attempted command

            System.out.println("Here is the standard error of the command (if any):\n");
            while ((s = stdError.readLine()) != null) {
                this.jTextArea1.append(s+"\n");
            }
            
            //System.exit(0);
                 }
        catch (IOException e) {
            System.out.println("exception happened - here's what I know: ");
            e.printStackTrace();
  //          System.exit(-1);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jPasswordField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPasswordField1MouseClicked
// TODO add your handling code here:
            this.jPasswordField1.setText("");
    }//GEN-LAST:event_jPasswordField1MouseClicked

    private void jPasswordField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordField1ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jPasswordField1ActionPerformed

    private void jButton9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MouseClicked
// TODO add your handling code here:
        
    }//GEN-LAST:event_jButton9MouseClicked

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
// TODO add your handling code here:
        
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jTextField2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField2MouseClicked
// TODO add your handling code here:
        this.jTextField2.setText("");
    }//GEN-LAST:event_jTextField2MouseClicked

    private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
// TODO add your handling code here:
        this.jTextField1.setText("");
    }//GEN-LAST:event_jTextField1MouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed
public Object doWork(int i){
          BufferedReader in = null;
 //   int i;
try{
    try {
        Runtime r = Runtime.getRuntime();
        Process p = r.exec("ping -c 4 "+this.topologyNodes[i].getControlIpAddress());
        String out="";
        if (p == null && i==0) {
            this.jTextArea1.append("Could not connect\n"+this.ulmanNodes[i]);
        }
        else if(p==null && i==1){
            this.jTextArea2.append("Could not connect\n"+this.ulmanNodes[i]);
        }
        else{
            in = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line;
            while ((line = in.readLine()) != null) {
                if(i==0)
                    this.jTextArea1.append(line+"\n");
                else
                    this.jTextArea2.append(line+"\n");
            }
            in.close();
        }
     }
     catch (IOException io) {
        System.err.println(io.toString());
     }
     if (Thread.interrupted()) {
                    throw new InterruptedException();
                }
                Thread.sleep(500);
}
        catch (InterruptedException e) {
  //          updateStatus(0);
            return "Interrupted";  // SwingWorker.get() returns this
        }
        return "All Done";         // or this
}
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
// TODO add your handling code here:
       int i;
          for(i=0;i<2; i++)//number of nodes
           {
           worker = new SwingWorker(i) {
                public Object construct(int j) {
                 return doWork(j);
                }
                public void finished() {
                    System.out.println("Adil Raja");
                }
           };
           worker.start();
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int retVal = jFileChooser1.showOpenDialog(NewJFrame.this);
         if (retVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.lang.String fileName = jFileChooser1.getSelectedFile().getAbsolutePath();
            //This is where a real application would open the file.
            try {
                Process p = Runtime.getRuntime().exec(fileName);
                BufferedReader stdInput = new BufferedReader(new 
                InputStreamReader(p.getInputStream()));
                BufferedReader stdError = new BufferedReader(new 
                InputStreamReader(p.getErrorStream()));

 /*         // read the output from the command
            
            System.out.println("Here is the standard output of the command:\n");
            while ((s = stdInput.readLine()) != null) {
                System.out.println(s);
            }
            // read any errors from the attempted command

            System.out.println("Here is the standard error of the command (if any):\n");
            while ((s = stdError.readLine()) != null) {
                System.out.println(s);
            }
            
            System.exit(0);*/
                 }
        catch (IOException e) {
            System.out.println("exception happened - here's what I know: ");
            e.printStackTrace();
  //          System.exit(-1);
        }
//
  //          log.append("Opening: " + file.getName() + ".\n");
        } 
        else{
            log.append("Open command cancelled by user.\n" );
        }
        log.setCaretPosition(log.getDocument().getLength());
    }//GEN-LAST:event_jButton1ActionPerformed
    private void initFileChooser()
    {
        log = new javax.swing.JTextArea(5,20);
        log.setMargin(new java.awt.Insets(5,5,5,5));
        log.setEditable(false);
        this.jFileChooser1 = new javax.swing.JFileChooser();
        this.jFileChooser1.setCurrentDirectory(new java.io.File("C:/dell"));
        
        
    }
    public void connected(SshConnectedEvent ev) {
                String shell=this.jTextArea1.getText();
                if(ev.getHost().compareTo(this.ulmanNodes[0])==0)
                {    
                this.jTextArea1.append("Connected: "+ev.getHost()+"\n");
                }
                else
                {
                     this.jTextArea2.append("Connected: "+ev.getHost()+"\n");
                }
  //              this.jButton6.setEnabled(true);
		this.connected = true;
	}

	/**
	 * Captures SshDataReceivedEvent
	 */
	public void dataReceived(SshDataReceivedEvent ev) {
       //         this.jTextArea1.append(ev.toString());
                Ssh ssh = (Ssh)ev.getSource();
                String hostname=ssh.getHostname();
                if(hostname.compareTo(this.ulmanNodes[0])==0)
        		this.jTextArea1.append(ev.getData());
                else
                        this.jTextArea2.append(ev.getData());
	}

	/**
	 * Captures SshDisconnectedEvent
	 */
	public void disconnected(SshDisconnectedEvent ev) {
       //         String shell=this.jTextArea1.getText();
         //       shell+="\nDisconnected why?: ";
                this.jTextArea1.append("Disconnected: "+ev.getHost()+"\n");
		connected = false;
	}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JTextArea log;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables
    /**
	 * Captures SshConnectedEvent
	 */
	class SharedListSelectionHandler implements ListSelectionListener {
        public void valueChanged(ListSelectionEvent e) { 
            ListSelectionModel lsm = (ListSelectionModel)e.getSource();

            int firstIndex = e.getFirstIndex();
            int lastIndex = e.getLastIndex();
            boolean isAdjusting = e.getValueIsAdjusting(); 
            System.out.print("Event for indexes "
                          + firstIndex + " - " + lastIndex
                          + "; isAdjusting is " + isAdjusting
                          + "; selected indexes:");

            if (lsm.isSelectionEmpty()) {
                System.out.print(" <none>");
            } else {
                // Find out which indexes are selected.
                int minIndex = lsm.getMinSelectionIndex();
                int maxIndex = lsm.getMaxSelectionIndex();
                for (int i = minIndex; i <= maxIndex; i++) {
                    if (lsm.isSelectedIndex(i)) {
                        System.out.print(" " + i);
                    }
                }
            }
            System.out.print("\n");
   //         output.setCaretPosition(output.getDocument().getLength());
        }
    }
}
